{"version":3,"sources":["../ts/Main.ts","../ts/Maze/Maze.ts","../ts/Maze/MazeGenerator.ts","../ts/Maze/MazeNode.ts","../ts/Maze/MazeNodeIndex.ts","../ts/Maze/MazeNodeRelation.ts","../ts/Maze/MazeNodeRelationSlot.ts","../ts/Rendering/MazeRenderer.ts"],"names":[],"mappings":"AAAA,kDAAkD;AAElD;IAKE;QAAA,iBA0BC;QAzBC,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;QAE7B,IAAI,CAAC,IAAI,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC;YACrC,WAAW,EAAE,IAAI,CAAC,YAAY;SAC/B,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;YACrB,UAAU,EAAE;gBACR,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;gBACzF,KAAI,CAAC,uBAAuB,EAAE,CAAC;gBAE/B,KAAI,CAAC,KAAK,GAAG,aAAa,CAAC,iBAAiB,EAAE,CAAC;gBAC/C,YAAY,CAAC,cAAc,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC;YAC5F,CAAC;YACH,cAAc,EAAE,UAAC,eAAuD;gBACtE,IAAM,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,EAAE,CAAC,SAAS,EAAE,EAAjC,CAAiC,CAAC,CAAC;gBACtF,KAAI,IAAI,WAAW,IAAI,YAAY,EAAC;oBAClC,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC;iBACpC;YACH,CAAC;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAEO,sCAAuB,GAA/B;QAAA,iBAMC;QALC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE;YAChC,KAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IAC3B,CAAC;IACH,WAAC;AAAD,CAxCA,AAwCC,IAAA;AC1CD;IAME,cAAY,QAAgB,EAAE,QAAgB;QAC5C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,EAAmB,CAAC;QAE3C,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,QAAQ,EAAE,EAAE,QAAQ,EAAE;YACtD,IAAI,GAAG,GAAe,IAAI,KAAK,EAAY,CAAC;YAC5C,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,QAAQ,EAAE,EAAE,QAAQ,EAAE;gBACtD,GAAG,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;aACrE;YACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACvB;IACH,CAAC;IAEM,0BAAW,GAAlB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,0BAAW,GAAlB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,6BAAc,GAArB,UAAsB,CAAS,EAAE,CAAS;QACxC,IAAI,IAAI,GAAoB,IAAI,CAAC;QAEjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE;YAChE,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IACH,WAAC;AAAD,CArCA,AAqCC,IAAA;ACrCD;IAAA;IA4DA,CAAC;IA3De,kCAAoB,GAAlC;QACE,iBAAiB;QACjB,OAAO,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,CAAC;IAEa,+BAAiB,GAA/B;QACE,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAExC,kGAAkG;QAClG,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,EAAE,GAAG,EAAE;YACvC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,EAAE,GAAG,EAAE;gBACvC,IAAI,WAAW,GAAoB,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBAEjE,IAAI,WAAW,IAAI,IAAI,EAAE;oBACvB,IAAI,SAAS,GAAoB,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;oBACnE,IAAI,QAAQ,GAAoB,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;oBAElE,8BAA8B;oBAC9B,gDAAgD;oBAEhD,IAAI,SAAS,IAAI,IAAI,EAAE;wBAErB,IAAI,MAAM,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;wBACrD,IAAI,OAAO,GAAY,MAAM,IAAI,EAAE,CAAC;wBAEpC,IAAI,QAAQ,GAAqB,IAAI,gBAAgB,CACnD,WAAW,EACX,SAAS,EACT,CAAC,OAAO,CACT,CAAC;wBAEF,WAAW,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;wBAC5D,SAAS,CAAC,eAAe,CAAC,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;qBAC7D;oBAED,IAAG,QAAQ,IAAI,IAAI,EAAC;wBAChB,IAAI,MAAM,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;wBACrD,IAAI,OAAO,GAAY,MAAM,IAAI,EAAE,CAAC;wBAEpC,IAAI,QAAQ,GAAqB,IAAI,gBAAgB,CACnD,WAAW,EACX,QAAQ,EACR,CAAC,OAAO,CACT,CAAC;wBAEF,WAAW,CAAC,eAAe,CAAC,QAAQ,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;wBAC3D,QAAQ,CAAC,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC;qBAC1D;iBACA;qBACG;oBACA,MAAM,yCAAyC,CAAC;iBACnD;aACF;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IACH,oBAAC;AAAD,CA5DA,AA4DC,IAAA;AC5DD,qDAAqD;AAErD;IAQI,kBAAY,WAAiC;QACzC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG,IAAI,oBAAoB,EAAE,CAAC;QAChD,IAAI,CAAC,cAAc,GAAG,IAAI,oBAAoB,EAAE,CAAC;IACtD,CAAC;IAEO,oBAAC,GAAR;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEM,oBAAC,GAAR;QACI,OAAO,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;IAC/B,CAAC;IAEM,kCAAe,GAAtB,UAAuB,QAA2B,EAAE,KAAqB;QACrE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAEM,mCAAgB,GAAvB,UAAwB,QAA2B,EAAE,KAAqB;QACtE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC7C,CAAC;IAEM,gCAAa,GAApB,UAAqB,QAA2B,EAAE,KAAqB;QACnE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAEM,kCAAe,GAAtB,UAAuB,QAA2B,EAAE,KAAqB;QACrE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAEM,kCAAe,GAAtB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAEM,mCAAgB,GAAvB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAEM,gCAAa,GAApB;QACI,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAEM,kCAAe,GAAtB;QACI,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IACL,eAAC;AAAD,CAvDA,AAuDC,IAAA;ACzDD,IAAK,aAIJ;AAJD,WAAK,aAAa;IAEd,mDAAK,CAAA;IACL,qDAAM,CAAA;AACV,CAAC,EAJI,aAAa,KAAb,aAAa,QAIjB;ACJD;IAKE,0BAAY,KAAe,EAAE,KAAe,EAAE,UAAmB;QAC/D,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAEM,kCAAO,GAAd,UAAe,SAAwB;QAErC,QAAQ,SAAS,EAAE;YACjB,KAAK,aAAa,CAAC,KAAK;gBACtB,OAAO,IAAI,CAAC,MAAM,CAAC;YAErB,KAAK,aAAa,CAAC,MAAM;gBACvB,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;IACH,CAAC;IAEM,qCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IACH,uBAAC;AAAD,CAzBA,AAyBC,IAAA;ACzBD;IAIE;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAEM,yCAAU,GAAjB;QACE,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;IACtE,CAAC;IAEM,6CAAc,GAArB;QACE,IAAI,IAAI,GAAG,IAAI,CAAC;QAEhB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;YACrD,QAAQ,IAAI,CAAC,UAAU,EAAE;gBACvB,KAAK,aAAa,CAAC,KAAK;oBACtB,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;oBACpD,MAAM;gBAER,KAAK,aAAa,CAAC,MAAM;oBACvB,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBACnD,MAAM;aACT;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,kCAAG,GAAV,UAAW,QAA2B,EAAE,KAAqB;QACzD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IACH,2BAAC;AAAD,CAnCA,AAmCC,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCD;IAAA;IAyJA,CAAC;IAvJqB,sBAAS,GAA7B,UAA8B,MAA+B,EAAE,QAAiB;;;;;;wBACxE,CAAC,GAA6B,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;4BAC5D,IAAM,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;4BACrC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;4BACpC,OAAO,CAAC,YAAY,GAAG,aAAa,CAAC;4BACrC,OAAO,CAAC,MAAM,GAAG;gCACb,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,EAAE;oCAC1B,IAAI,OAAO,CAAC,MAAM,KAAK,GAAG,EAAE;wCACxB,OAAO,CAAC,OAAO,CAAC,CAAC;qCACpB;iCACJ;4BACL,CAAC,CAAC;4BACF,OAAO,CAAC,OAAO,GAAG,UAAU,KAAK;gCAC7B,MAAM,CAAC,KAAK,CAAC,CAAC;4BAClB,CAAC,CAAC;4BACF,OAAO,CAAC,IAAI,EAAE,CAAC;wBACnB,CAAC,CAAC,CAAC;wBACa,qBAAM,CAAC,EAAA;;wBAAjB,OAAO,GAAG,SAAO;wBACjB,YAAY,GAAG;4BACjB,MAAM,EAAE,YAAY,CAAC,WAAW,CAAC,IAAI;4BACrC,IAAI,EAAE,IAAI,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC;yBACzC,CAAC;wBACF,sBAAO,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,EAAC;;;;KACjD;IAEa,2BAAc,GAA5B,UAA6B,MAA+B,EAAE,MAA4B,EAAE,OAA8B;QACxH,IAAI,MAAM,KAAK,IAAI,EAAE;YACjB,IAAM,cAAc,GAAG;gBACnB,OAAO,EAAE,OAAO;gBAChB,SAAS,EAAE,YAAY,CAAC,eAAe,CAAC,KAAK;aAChD,CAAC;YACF,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,EAAE,cAAc,CAAC,CAAC;SAC1D;IACH,CAAC;IAEqB,2BAAc,GAAlC,UACE,IAAU,EACV,MAA8B,EAC9B,UAA+B;;;;;4BAGiB,qBAAM,YAAY,CAAC,SAAS,CAAC,MAAM,EAAE,8BAA8B,CAAC,EAAA;;wBAA9G,gBAAgB,GAA0B,SAAoE;wBACnE,qBAAM,YAAY,CAAC,SAAS,CAAC,MAAM,EAAE,+BAA+B,CAAC,EAAA;;wBAAhH,iBAAiB,GAA0B,SAAqE;wBAElH,gBAAgB,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;wBAEnE,QAAQ,GAAW,CAAC,CAAC;wBAGrB,iBAAiB,GAAW,uBAAuB,CAAC;wBACpD,wBAAwB,GAAW,+BAA+B,CAAC;wBAEzE,kBAAkB;wBAClB,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;wBACF,qBAAM,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,EAAA;;wBAA1H,kBAAkB,GAA0B,SAA8E;wBAC5E,qBAAM,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,wBAAwB,CAAC,EAAA;;wBAAnI,oBAAoB,GAA0B,SAAqF;wBAEvI,yCAAyC;wBACzC,IAAI,kBAAkB,CAAC,MAAM,IAAI,CAAC;4BAAE,MAAM,0BAA0B,CAAC;wBACrE,IAAI,oBAAoB,CAAC,MAAM,IAAI,CAAC;4BAAE,MAAM,6BAA6B,CAAC;wBAEtE,oBAAoB,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;wBAC7C,uBAAuB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;wBAGlD,mBAAmB,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAC,YAAY,CAAC,CAAC;wBAGpD,qBAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,CAAC,EAAA;;wBAAxE,gBAAgB,GAAG,SAAqD;wBAClD,qBAAM,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,uBAAuB,CAAC,CAAC,EAAA;;wBAA9E,mBAAmB,GAAG,SAAwD;wBAElF,kCAAkC;wBAClC,IAAG,gBAAgB,CAAC,MAAM,IAAI,CAAC;4BAAE,MAAM,0BAA0B,CAAC;wBAClE,IAAG,mBAAmB,CAAC,MAAM,IAAI,CAAC;4BAAE,MAAM,6BAA6B,CAAC;wBAExE,wDAAwD;wBACxD,KAAS,QAAQ,GAAW,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,QAAQ,EAAE;4BACxE,KAAS,QAAQ,GAAW,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,QAAQ,EAAE;gCAGpE,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;gCACnE,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,CAAC;gCACtC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gCACpB,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,CAAC;gCAGlC,gBAAgB,GAAmC,IAAI,YAAY,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,qBAAqB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,CAAC;gCAC/N,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;oCAC7D,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;gCAChE,CAAC,CAAC,CAAC;6BACF;yBACF;wBAED,wCAAwC;wBACxC,8EAA8E;wBAE9E,KAAQ,QAAQ,GAAY,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,QAAQ,EAAC;4BACvE,KAAQ,QAAQ,GAAY,CAAC,EAAE,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,QAAQ,EAAC;gCACnE,IAAI,GAAqB,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;gCACnE,IAAG,IAAI,IAAI,IAAI,EAAC;oCACV,QAAQ,GAA0B,IAAI,CAAC,eAAe,EAAE,CAAC;oCAC7D,IAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAC;wCAClB,WAAW,GAAyB,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;wCAC9E,WAAW,GAAG,WAAW,CAAC,uBAAuB,CAAC,QAAQ,GAAC,QAAQ,GAAG,QAAQ,GAAC,GAAG,EAAE,CAAC,EAAE,QAAQ,GAAC,QAAQ,CAAC,CAAC;wCAEtG,gBAAgB,GAAmC,IAAI,YAAY,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,wBAAwB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,CAAC;wCACvO,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;4CAC7D,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;wCAC/D,CAAC,CAAC,CAAC;qCACN;oCAEG,MAAM,GAA0B,IAAI,CAAC,aAAa,EAAE,CAAC;oCACzD,IAAG,CAAC,MAAM,CAAC,UAAU,EAAE,EAAC;wCAChB,WAAW,GAAyB,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;wCAC7E,WAAW,GAAG,WAAW,CAAC,uBAAuB,CAAC,QAAQ,GAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,GAAC,QAAQ,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;wCAExG,gBAAgB,GAAmC,IAAI,YAAY,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,wBAAwB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,CAAC;wCACvO,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;4CAC3D,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;wCACjE,CAAC,CAAC,CAAC;qCACN;oCAED,IAAG,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC;wCAC9B,QAAQ,GAA0B,IAAI,CAAC,eAAe,EAAE,CAAC;wCAC7D,IAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAC;4CAClB,WAAW,GAAyB,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;4CAC7E,WAAW,GAAG,WAAW,CAAC,uBAAuB,CAAC,QAAQ,GAAC,QAAQ,EAAE,CAAC,EAAE,QAAQ,GAAC,QAAQ,GAAG,QAAQ,GAAG,GAAG,CAAC,CAAC;4CAExG,gBAAgB,GAAmC,IAAI,YAAY,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,wBAAwB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,CAAC;4CACvO,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gDAC3D,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;4CACjE,CAAC,CAAC,CAAC;yCACN;qCACJ;oCAED,IAAG,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,EAAC;wCAC9B,SAAS,GAA0B,IAAI,CAAC,gBAAgB,EAAE,CAAC;wCAC/D,IAAG,CAAC,SAAS,CAAC,UAAU,EAAE,EAAC;4CACnB,WAAW,GAAyB,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;4CAC9E,WAAW,GAAG,WAAW,CAAC,uBAAuB,CAAC,QAAQ,GAAC,QAAQ,GAAG,QAAQ,GAAG,GAAG,EAAE,CAAC,EAAE,QAAQ,GAAC,QAAQ,CAAC,CAAC;4CAExG,gBAAgB,GAAmC,IAAI,YAAY,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,wBAAwB,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,CAAC;4CACvO,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gDAC3D,YAAY,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;4CACjE,CAAC,CAAC,CAAC;yCACN;qCACJ;iCACJ;6BACF;yBACF;;;;;KACF;IACH,mBAAC;AAAD,CAzJA,AAyJC,IAAA","file":"hcpbrmaze.js","sourcesContent":["/// <reference path=\"HWV/hoops_web_viewer.d.ts\" />\r\n\r\nclass Main {\r\n  private _containerId: string;\r\n  private _hwv: Communicator.WebViewer;\r\n  private _maze: Maze | null;\r\n\r\n  constructor() {\r\n    this._containerId = \"viewer\";\r\n\r\n    this._hwv = new Communicator.WebViewer({\r\n      containerId: this._containerId,\r\n    });\r\n\r\n    this._maze = null;\r\n\r\n    this._hwv.setCallbacks({\r\n      sceneReady: () => {\r\n          this._hwv.view.setBackgroundColor(Communicator.Color.blue(), Communicator.Color.white());\r\n          this._initResizeEventHandler();\r\n\r\n          this._maze = MazeGenerator.generateHardcoded();\r\n          MazeRenderer.createMazeMesh(this._maze, this._hwv, this._hwv.model.getAbsoluteRootNode());\r\n        },\r\n      selectionArray: (selectionEvents:Communicator.Event.NodeSelectionEvent[]) => {\r\n        const selectionIds = selectionEvents.map(sEvent => sEvent.getSelection().getNodeId());\r\n        for(let selectionId in selectionIds){\r\n          console.log(\">>>> \" + selectionId);\r\n        }\r\n      },\r\n    });\r\n\r\n    this._hwv.start();\r\n  }\r\n\r\n  private _initResizeEventHandler() {\r\n    window.addEventListener(\"resize\", () => {\r\n      this._hwv.resizeCanvas();\r\n    });\r\n\r\n    this._hwv.resizeCanvas();\r\n  }\r\n}\r\n","class Maze {\r\n  // Note : (0,0) is bottom left, first rows then columns\r\n  private _cells: MazeNode[][];\r\n  private _colCount: number;\r\n  private _rowCount: number;\r\n\r\n  constructor(rowCount: number, colCount: number) {\r\n    this._colCount = colCount;\r\n    this._rowCount = rowCount;\r\n    this._cells = new Array<Array<MazeNode>>();\r\n\r\n    for (let rowIndex = 0; rowIndex < rowCount; ++rowIndex) {\r\n      let row: MazeNode[] = new Array<MazeNode>();\r\n      for (let colIndex = 0; colIndex < colCount; ++colIndex) {\r\n        row.push(new MazeNode(new Communicator.Point2(colIndex, rowIndex)));\r\n      }\r\n      this._cells.push(row);\r\n    }\r\n  }\r\n\r\n  public getRowCount(): number {\r\n    return this._rowCount;\r\n  }\r\n\r\n  public getColCount(): number {\r\n    return this._colCount;\r\n  }\r\n\r\n  public getNodeAtCoord(x: number, y: number): MazeNode | null {\r\n    let node: MazeNode | null = null;\r\n\r\n    if (x >= 0 && x < this._colCount && y >= 0 && y < this._rowCount) {\r\n      node = this._cells[y][x];\r\n    }\r\n\r\n    return node;\r\n  }\r\n}\r\n","class MazeGenerator {\r\n  public static generateProcedurally(): Maze {\r\n    // TODO : Zachary\r\n    return new Maze(0, 0);\r\n  }\r\n\r\n  public static generateHardcoded(): Maze {\r\n    let rowCount = 30;\r\n    let colCount = 50;\r\n    let maze = new Maze(rowCount, colCount);\r\n\r\n    // Each node will create its down / right relations and fill according left / up of related nodes.\r\n    for (let row = 0; row < rowCount; ++row) {\r\n      for (let col = 0; col < colCount; ++col) {\r\n        let currentNode: MazeNode | null = maze.getNodeAtCoord(col, row);\r\n\r\n        if (currentNode != null) {\r\n          let rightNode: MazeNode | null = maze.getNodeAtCoord(col + 1, row);\r\n          let downNode: MazeNode | null = maze.getNodeAtCoord(col, row + 1);\r\n\r\n          // Note about random wall draw\r\n          // 25% chances => [0,74] = free, [75,100] = wall\r\n\r\n          if (rightNode != null) {\r\n\r\n            let random: number = Math.floor(Math.random() * 100);\r\n            let hasWall: boolean = random >= 75;\r\n\r\n            let relation: MazeNodeRelation = new MazeNodeRelation(\r\n              currentNode,\r\n              rightNode,\r\n              !hasWall\r\n            );\r\n          \r\n            currentNode.setRightRelation(relation, MazeNodeIndex.First);\r\n            rightNode.setLeftRelation(relation, MazeNodeIndex.Second);\r\n        }\r\n\r\n        if(downNode != null){\r\n            let random: number = Math.floor(Math.random() * 100);\r\n            let hasWall: boolean = random >= 75;\r\n\r\n            let relation: MazeNodeRelation = new MazeNodeRelation(\r\n              currentNode,\r\n              downNode,\r\n              !hasWall\r\n            );\r\n          \r\n            currentNode.setDownRelation(relation, MazeNodeIndex.First);\r\n            downNode.setUpRelation(relation, MazeNodeIndex.Second);\r\n        }\r\n        }\r\n        else{\r\n            throw \"Current node is not supposed to be null\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return maze;\r\n  }\r\n}\r\n","/// <reference path=\"../HWV/hoops_web_viewer.d.ts\" />\r\n\r\nclass MazeNode\r\n{\r\n    private _coordinates : Communicator.Point2;\r\n    private _leftRelation : MazeNodeRelationSlot;\r\n    private _upRelation : MazeNodeRelationSlot;\r\n    private _downRelation : MazeNodeRelationSlot;\r\n    private _rightRelation : MazeNodeRelationSlot;\r\n    \r\n    constructor(coordinates : Communicator.Point2){\r\n        this._coordinates = coordinates;\r\n        this._leftRelation = new MazeNodeRelationSlot();\r\n        this._upRelation = new MazeNodeRelationSlot();\r\n        this._downRelation = new MazeNodeRelationSlot();\r\n        this._rightRelation = new MazeNodeRelationSlot();\r\n   }\r\n\r\n    public x() : number{\r\n        return this._coordinates.x;\r\n    }\r\n\r\n    public y() : number{\r\n        return this._coordinates.y;\r\n    }\r\n\r\n    public setLeftRelation(relation : MazeNodeRelation, index : MazeNodeIndex) : void {\r\n        this._leftRelation.set(relation, index);\r\n    }\r\n\r\n    public setRightRelation(relation : MazeNodeRelation, index : MazeNodeIndex) : void{\r\n        this._rightRelation.set(relation, index);\r\n    }\r\n\r\n    public setUpRelation(relation : MazeNodeRelation, index : MazeNodeIndex) : void{\r\n        this._upRelation.set(relation, index);\r\n    }\r\n\r\n    public setDownRelation(relation : MazeNodeRelation, index : MazeNodeIndex) : void{\r\n        this._downRelation.set(relation, index);\r\n    }\r\n\r\n    public getLeftRelation() : MazeNodeRelationSlot{\r\n        return this._leftRelation;\r\n    }\r\n\r\n    public getRightRelation() : MazeNodeRelationSlot{\r\n        return this._rightRelation;\r\n    }\r\n    \r\n    public getUpRelation() : MazeNodeRelationSlot{\r\n        return this._upRelation;\r\n    }\r\n    \r\n    public getDownRelation() : MazeNodeRelationSlot{\r\n        return this._downRelation;\r\n    }\r\n}","enum MazeNodeIndex\r\n{\r\n    First,\r\n    Second\r\n}","class MazeNodeRelation {\r\n  private _node1: MazeNode;\r\n  private _node2: MazeNode;\r\n  private _pathIsFree: boolean;\r\n\r\n  constructor(node1: MazeNode, node2: MazeNode, pathIsFree: boolean) {\r\n    this._node1 = node1;\r\n    this._node2 = node2;\r\n    this._pathIsFree = pathIsFree;\r\n  }\r\n\r\n  public getNode(nodeIndex: MazeNodeIndex) : MazeNode\r\n  {\r\n    switch (nodeIndex) {\r\n      case MazeNodeIndex.First:\r\n        return this._node1;\r\n\r\n      case MazeNodeIndex.Second:\r\n        return this._node2;\r\n    }\r\n  }\r\n\r\n  public isPathFree() : boolean{\r\n      return this._pathIsFree;\r\n  }\r\n}\r\n","class MazeNodeRelationSlot {\r\n  private _relation: MazeNodeRelation | null;\r\n  private _nodeIndex: MazeNodeIndex | null;\r\n\r\n  constructor() {\r\n    this._relation = null;\r\n    this._nodeIndex = null;\r\n  }\r\n\r\n  public isPathFree(): boolean {\r\n    return this._relation != null ? this._relation.isPathFree() : false;\r\n  }\r\n\r\n  public getRelatedNode(): MazeNode | null {\r\n    let node = null;\r\n\r\n    if (this._relation != null && this._nodeIndex != null) {\r\n      switch (this._nodeIndex) {\r\n        case MazeNodeIndex.First:\r\n          node = this._relation.getNode(MazeNodeIndex.Second);\r\n          break;\r\n\r\n        case MazeNodeIndex.Second:\r\n          node = this._relation.getNode(MazeNodeIndex.First);\r\n          break;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  public set(relation : MazeNodeRelation, index : MazeNodeIndex){\r\n      this._relation = relation;\r\n      this._nodeIndex = index;\r\n  }\r\n}\r\n","class MazeRenderer {\r\n\r\n  public static async loadImage(viewer : Communicator.WebViewer, filename : string) {\r\n    const p : Promise<XMLHttpRequest> = new Promise((resolve, reject) => {\r\n        const request = new XMLHttpRequest();\r\n        request.open(`GET`, filename, true);\r\n        request.responseType = `arraybuffer`;\r\n        request.onload = function () {\r\n            if (request.readyState === 4) {\r\n                if (request.status === 200) {\r\n                    resolve(request);\r\n                }\r\n            }\r\n        };\r\n        request.onerror = function (event) {\r\n            reject(event);\r\n        };\r\n        request.send();\r\n    });\r\n    const request = await p;\r\n    const imageOptions = {\r\n        format: Communicator.ImageFormat.Jpeg,\r\n        data: new Uint8Array(request.response),\r\n    };\r\n    return viewer.model.createImage(imageOptions);\r\n}\r\n\r\npublic static setNodeTexture(viewer : Communicator.WebViewer, nodeId : Communicator.NodeId, imageId : Communicator.ImageId) {\r\n  if (nodeId !== null) {\r\n      const textureOptions = {\r\n          imageId: imageId,\r\n          modifiers: Communicator.TextureModifier.Decal\r\n      };\r\n      viewer.model.setNodesTexture([nodeId], textureOptions);\r\n  }\r\n}\r\n\r\n  public static async createMazeMesh(\r\n    maze: Maze,\r\n    viewer: Communicator.WebViewer,\r\n    rootNodeId: Communicator.NodeId\r\n  ) {\r\n\r\n    const rockColorImageId : Communicator.ImageId = await MazeRenderer.loadImage(viewer, \"data/textures/rock_color.jpg\");\r\n    const brickColorImageId : Communicator.ImageId = await MazeRenderer.loadImage(viewer, \"data/textures/brick_color.jpg\");\r\n\r\n    let meshesRootNodeId = viewer.model.createNode(rootNodeId, \"MeshesRoot\");\r\n\r\n    const cellSize: number = 2;\r\n\r\n    // Filepaths of scs files\r\n    const floorTileFilepath: string = \"data/models/floor.scs\";\r\n    const wallStraightTileFilepath: string = \"data/models/wall_straight.scs\";\r\n\r\n    // Load scs models\r\n    viewer.model.setEnableAutomaticUnitScaling(false);\r\n    let floorTilesNodesIds: Communicator.NodeId[] = await viewer.model.loadSubtreeFromScsFile(meshesRootNodeId, floorTileFilepath);\r\n    let wallStraightNodesIds: Communicator.NodeId[] = await viewer.model.loadSubtreeFromScsFile(meshesRootNodeId, wallStraightTileFilepath);\r\n       \r\n    // Results should contain only one NodeId\r\n    if (floorTilesNodesIds.length != 1) throw \"Invalid floor tile model\";\r\n    if (wallStraightNodesIds.length != 1) throw \"Invalid wall straight model\";\r\n\r\n    let floorTileModelNodeId = floorTilesNodesIds[0];\r\n    let wallStraightModelNodeId = wallStraightNodesIds[0];\r\n\r\n    // Create a root for all model instances\r\n    let floorTileRootNodeId = viewer.model.createNode(rootNodeId,\"FloorTiles\");\r\n\r\n    // Get mesh ids \r\n    let floorTileMeshIds = await viewer.model.getMeshIds([floorTileModelNodeId]);\r\n    let wallStraightMeshIds = await viewer.model.getMeshIds([wallStraightModelNodeId]);\r\n            \r\n    // We still expect only one meshId\r\n    if(floorTileMeshIds.length != 1) throw \"Invalid floor tile model\";\r\n    if(wallStraightMeshIds.length != 1) throw \"Invalid wall straight model\";\r\n\r\n    // UNOPTIMIZED : For each cell instanciate a floor tile.\r\n    for (let rowIndex: number = 0; rowIndex < maze.getRowCount(); ++rowIndex) {\r\n      for (let colIndex: number = 0; colIndex < maze.getColCount(); ++colIndex) {\r\n\r\n        // compute the model matrix to move the tile at good position;\r\n        let netMatrix = viewer.model.getNodeNetMatrix(floorTileRootNodeId);\r\n        netMatrix.m[12] = cellSize * colIndex;\r\n        netMatrix.m[13] = 0;\r\n        netMatrix.m[14] = cellSize * rowIndex;\r\n\r\n        // Create the MeshInstanceData of floor tile\r\n        let meshInstanceData : Communicator.MeshInstanceData = new Communicator.MeshInstanceData(floorTileMeshIds[0], netMatrix, \"Floor Tile Instance\", null, null, null, Communicator.MeshInstanceCreationFlags.DoNotUseVertexColors);\r\n        viewer.model.createMeshInstance(meshInstanceData).then(nodeId => {\r\n        MazeRenderer.setNodeTexture(viewer, nodeId, rockColorImageId); \r\n      });\r\n      }\r\n    }\r\n        \r\n    // Each cell check for up and left wall.\r\n    // Last row and last column check for respectively for botton and right walls.\r\n\r\n    for(let rowIndex : number = 0; rowIndex < maze.getRowCount(); ++rowIndex){\r\n      for(let colIndex : number = 0; colIndex < maze.getColCount(); ++colIndex){\r\n        let node : MazeNode | null = maze.getNodeAtCoord(colIndex, rowIndex); \r\n          if(node != null){\r\n            let leftSlot : MazeNodeRelationSlot = node.getLeftRelation();\r\n            if(!leftSlot.isPathFree()){\r\n                let modelMatrix : Communicator.Matrix = Communicator.Matrix.yAxisRotation(90);\r\n                modelMatrix = modelMatrix.setTranslationComponent(cellSize*colIndex - cellSize*0.5, 0, cellSize*rowIndex);\r\n            \r\n                let meshInstanceData : Communicator.MeshInstanceData = new Communicator.MeshInstanceData(wallStraightMeshIds[0], modelMatrix, \"Straight Wall Instance\", null, null, null, Communicator.MeshInstanceCreationFlags.DoNotUseVertexColors);\r\n                viewer.model.createMeshInstance(meshInstanceData).then(nodeId => {\r\n                MazeRenderer.setNodeTexture(viewer, nodeId, brickColorImageId);\r\n                });\r\n            }\r\n                    \r\n            let upSlot : MazeNodeRelationSlot = node.getUpRelation();\r\n            if(!upSlot.isPathFree()){\r\n                let modelMatrix : Communicator.Matrix = Communicator.Matrix.yAxisRotation(0);\r\n                modelMatrix = modelMatrix.setTranslationComponent(cellSize*colIndex, 0, cellSize*rowIndex - cellSize * 0.5);\r\n            \r\n                let meshInstanceData : Communicator.MeshInstanceData = new Communicator.MeshInstanceData(wallStraightMeshIds[0], modelMatrix, \"Straight Wall Instance\", null, null, null, Communicator.MeshInstanceCreationFlags.DoNotUseVertexColors);\r\n                viewer.model.createMeshInstance(meshInstanceData).then(nodeId => {\r\n                  MazeRenderer.setNodeTexture(viewer, nodeId, brickColorImageId);\r\n                });\r\n            }    \r\n      \r\n            if(rowIndex == maze.getRowCount() - 1){\r\n                let downSlot : MazeNodeRelationSlot = node.getDownRelation();\r\n                if(!downSlot.isPathFree()){\r\n                    let modelMatrix : Communicator.Matrix = Communicator.Matrix.yAxisRotation(0);\r\n                    modelMatrix = modelMatrix.setTranslationComponent(cellSize*colIndex, 0, cellSize*rowIndex + cellSize * 0.5);\r\n                \r\n                    let meshInstanceData : Communicator.MeshInstanceData = new Communicator.MeshInstanceData(wallStraightMeshIds[0], modelMatrix, \"Straight Wall Instance\", null, null, null, Communicator.MeshInstanceCreationFlags.DoNotUseVertexColors);\r\n                    viewer.model.createMeshInstance(meshInstanceData).then(nodeId => {\r\n                      MazeRenderer.setNodeTexture(viewer, nodeId, brickColorImageId);\r\n                    });\r\n                }   \r\n            }\r\n\r\n            if(colIndex == maze.getColCount() - 1){\r\n                let rightSlot : MazeNodeRelationSlot = node.getRightRelation();\r\n                if(!rightSlot.isPathFree()){\r\n                    let modelMatrix : Communicator.Matrix = Communicator.Matrix.yAxisRotation(90);\r\n                    modelMatrix = modelMatrix.setTranslationComponent(cellSize*colIndex + cellSize * 0.5, 0, cellSize*rowIndex);\r\n                \r\n                    let meshInstanceData : Communicator.MeshInstanceData = new Communicator.MeshInstanceData(wallStraightMeshIds[0], modelMatrix, \"Straight Wall Instance\", null, null, null, Communicator.MeshInstanceCreationFlags.DoNotUseVertexColors);\r\n                    viewer.model.createMeshInstance(meshInstanceData).then(nodeId => {\r\n                      MazeRenderer.setNodeTexture(viewer, nodeId, brickColorImageId);\r\n                    });\r\n                }   \r\n            }\r\n        }            \r\n      }\r\n    }\r\n  }\r\n}\r\n"]}